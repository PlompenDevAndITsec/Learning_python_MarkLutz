Python Programs can be decomposed into modules, statements, expressions and object, as follows:

    1. Programs are composed of modules.
    2. Modules contain statements.
    3. Statements contain expressions.
    4. Expressions create and process objects.


WHY USE BUILT-IN TYPES?

If you've used lower-level languages such as C or C++, you know that much of your work
centers on implementing *i*objects* -- also known as *i* data structures* -- to represent the components in your
application`s domain.
you need to do memory management and that's tedious. (and other routines).


In python programs the grunt work goes away because of powerful object types as an intrinsic part of the language.
There is no need for object implementations (usually) before solving problems.
often your best of using build in types instead of your own because:


p.97 for more details

    1. Built-in objects make programs easy to write.
    2. Built-in objects are components of extensions.
    3. Built-in objects are often more efficient than custom data structures.
    4. Built-in objects are a standard part of the language.
-------------------------------------------------------------------------------------------------------------
PYTHON'S CORE DATA TYPES
p.98 for full table
    -Numbers
    -Strings
    -Dictionaries
    -Tuples
    -Files
    -Sets
    -other core types:              Booleans, types, none
    -Program unit types:            Functions, modules, classes
    -implementation related types:  Compiled code, stack, tracebacks


Table above isn't complete since *i*everything* we process in Python programs is kind of a object.

(..)
------------------------------------------------------------------------------
p.99

there are no type declarations in python, the syntax of the expressions you run determines the types of objects
you create and use.
Python is *i*dynamically typed.*

--------------------------------
Numbers

Pythons core objects set includes *i* integers, floating-point, decimals, rationals. *

See script1.py for examples.