Python Programs can be decomposed into modules, statements, expressions and object, as follows:

    1. Programs are composed of modules.
    2. Modules contain statements.
    3. Statements contain expressions.
    4. Expressions create and process objects.


WHY USE BUILT-IN TYPES?

If you've used lower-level languages such as C or C++, you know that much of your work
centers on implementing *i*objects* -- also known as *i* data structures* -- to represent the components in your
application`s domain.
you need to do memory management and that's tedious. (and other routines).


In python programs the grunt work goes away because of powerful object types as an intrinsic part of the language.
There is no need for object implementations (usually) before solving problems.
often your best of using build in types instead of your own because:


p.97 for more details

    1. Built-in objects make programs easy to write.
    2. Built-in objects are components of extensions.
    3. Built-in objects are often more efficient than custom data structures.
    4. Built-in objects are a standard part of the language.
-------------------------------------------------------------------------------------------------------------
PYTHON'S CORE DATA TYPES
p.98 for full table
    -Numbers
    -Strings
    -Dictionaries
    -Tuples
    -Files
    -Sets
    -other core types:              Booleans, types, none
    -Program unit types:            Functions, modules, classes
    -implementation related types:  Compiled code, stack, tracebacks


Table above isn't complete since *i*everything* we process in Python programs is kind of a object.

(..)
------------------------------------------------------------------------------
p.99

there are no type declarations in python, the syntax of the expressions you run determines the types of objects
you create and use.
Python is *i*dynamically typed.*

--------------------------------
Numbers

Pythons core objects set includes *i* integers, floating-point, decimals, rationals. *

See script1.py for examples.


STRINGS
------------------------------------------------------------------------
p.101


Strings are used to record both textual information (your name, for instance) as well as arbitrary collections of bytes.
They are our first example of what python calls a sequence.
Sequences maintain a left to right order.

Check out script2.py fo examples on sequences.

Notice that *i* arbitrary expression* is possible in square brackets not just a hard-coded number literal.
Anywhere python expects a value we can use a literal, a variable, or any expression we wish.

slicing is also possible. [1:3]
p.102

!Notice that the original string is not changed!
It's called immutability.
meaning the string cannot change.

You can build a new String and assign it to the same name.
Python cleans up old objects as you go.

(see script 2)

Immutability can guarantee that an object remains constant throughout your program.


Type-Specific Methods p.104
--------------------------------------------------------------------------
Note-taking is taking too much time... reducing it more.
----------------------------------------------------------
p.106 - Getting help.
------------------------------
Type dir(S) to get help.

This function lists variables assigned in the caller's scope when called with no argument;
more usefully, it returns a list of all the attributes available for any object passed to it.
Because methods are attributes, they will show up in this list.

Dir simply gives methods names to ask what then you can pass them to the help function:
help(S.replace)
------------------------------------
Lists p.111
------------------------------------
Lists are mutable, meaning they can change actively and do not need to be assigned to a new variable.
However, adding to it is possible and changing existing value's and so is deleting.

BOUNDS CHECKING:
Although Lists have no fixed size, Python still doesn't allow us to reference items that are not present.
Indexing off the end of a list is always a mistake, but so is assigning off the end.
p.112

NESTING:
Python supports nesting of arrays or Multidimensional arrays.

    COMPREHENSIONS:
    P.114

    Comprehensions can select a specific target in a list for example:

        M = [[1,2,3], [4,5,6], [7,8,9]]
        col2 = [row[1] for row in M]

    col2 will contain all items in column 2 Human counting. (2,5,8)


This is just an overview more maybe later.


















